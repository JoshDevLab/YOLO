<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="kimjh">

	<!-- 부서 조회하기 -->
	<resultMap type="HashMap" id="deptMap">
		<result property="deptname" column="deptname" javaType="String"/>
		<result property="deptno" column="deptno" javaType="String"/>
	</resultMap>
	<select id="selectDept"  parameterType="String" resultMap="deptMap">
		select  deptname, deptno
		from TBL_DEPT
		where upper_deptno = #{deptno}
	</select>
	
	
	<!-- <resultMap type="HashMap" id="deptPeopleMap">
		<result property="empno" column="empno" javaType="String"/>
		<result property="name" column="name" javaType="String"/>
	</resultMap>
	<select id="selectDept" resultMap="deptPeopleMap" parameterType="String">
		select M.empno, M.name
		from TBL_EMPLOYEES M join  TBL_DEPT D
		on M.fk_deptno = D.deptno
		where  STATUS='재직' AND ( fk_deptno = #{deptno} OR upper_deptno = #{deptno} )
		order by M.fk_deptno asc;
	</select> -->
	
	
	<!-- 부서 사람들 조회하기 -->
	<resultMap type="HashMap" id="deptPeopleMap">
		<result property="empno" column="empno" javaType="String"/>
		<result property="name" column="name" javaType="String"/>
	</resultMap>
	<select id="selectDeptPerson" parameterType="HashMap" resultMap="deptPeopleMap">
		select empno, name
		from TBL_EMPLOYEES
		where STATUS='재직' AND fk_deptno = #{deptno} AND empno != #{empno}
	</select>
	
	
	
	<!-- 선택한 유저 목록 가져오기 -->
	<resultMap type="HashMap" id="chooseEmpMap">
		<result property="name" column="name" javaType="String"/>
		<result property="position" column="position" javaType="String"/>
		<result property="deptname" column="deptname" javaType="String"/>
		<result property="profile_color" column="profile_color" javaType="String"/>
		<result property="empno" column="empno" javaType="String"/>
	</resultMap>
	<select id="selectChooseEmp" parameterType="String" resultMap="chooseEmpMap">
		select name, position, deptname, profile_color, empno
		from
		(
		    select name, position, fk_deptno, PROFILE_COLOR, empno
		    from TBL_EMPLOYEES
		    where empno in (${str_empno})
		)
		join TBL_DEPT
		on fk_deptno = deptno
		order by fk_deptno, empno
	</select>
	
	
	
	<!-- 메신저 보내기 -->
	<insert id="insertSendMessenger" parameterType="String"  >
		${sql}
	</insert>
	
	
	
	<!-- 보낸 메일 리스트 가져오기 -->
	<resultMap type="HashMap" id="MsgMap">
		<result property="name" column="name" javaType="String"/>
		<result property="nickname" column="nickname" javaType="String"/>
		<result property="deptname" column="deptname" javaType="String"/>
		<result property="position" column="position" javaType="String"/>
		<result property="profile_color" column="profile_color" javaType="String"/>
		<result property="pk_msgno" column="pk_msgno" javaType="String"/>
		<result property="empno" column="empno" javaType="String"/>
		<result property="origin_msgno" column="origin_msgno" javaType="String"/>
		<result property="subject" column="subject" javaType="String"/>
		<result property="content" column="content" javaType="String"/>
		<result property="view_status" column="view_status" javaType="String"/>
		<result property="writedate" column="writedate" javaType="String"/>
		<result property="having_attach" column="having_attach" javaType="String"/>
		<result property="group_msgno" column="group_msgno" javaType="String"/>
	</resultMap>
	<select id="selectSentMsgList" parameterType="HashMap" resultMap="MsgMap">
		select name, substr(name, -2, 2) as nickname , deptname, position, profile_color, pk_msgno , empno, origin_msgno, subject, content, view_status
        ,to_char(WRITEDATE , 'yyyy-mm-dd hh24:mi:ss' ) as writedate, having_attach
		from
		(
		    select rownum as rno, name , deptname, position, profile_color, pk_msgno , empno, origin_msgno, subject, content, view_status
						, writedate, having_attach
				from
				(
				    select PK_MSGNO , FK_RECIPIENTNO, ORIGIN_MSGNO, SUBJECT, CONTENT, VIEW_STATUS, WRITEDATE, having_attach
				    from tbl_messenger
				    where FK_SENDERNO = #{empno}
		            order by WRITEDATE desc
				)
				join 
				( 
				    select empno, NAME, DEPTNAME, POSITION, PROFILE_COLOR
				    from TBL_EMPLOYEES M join  TBL_DEPT D
				    on M.fk_deptno = D.deptno
				
				) 
				on FK_RECIPIENTNO = empno
				<if test='searchWord != ""'>
					where lower(name) like '%' || lower(#{searchWord}) || '%' OR lower(subject) like '%' || lower(#{searchWord}) ||'%' OR lower(content) like '%' || lower(#{searchWord}) || '%'
				</if>
		)
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	<!-- 받은 메일 리스트 가져오기 -->
	<select id="selectReceivedMsgList" parameterType="HashMap" resultMap="MsgMap">
		select name, substr(name, -2, 2) as nickname , deptname, position, profile_color, pk_msgno , empno, origin_msgno, subject, content, view_status
        ,to_char(WRITEDATE , 'yyyy-mm-dd hh24:mi:ss' ) as writedate, having_attach
		from
		(
		    select rownum as rno, name , deptname, position, profile_color, pk_msgno , empno, origin_msgno, subject, content, view_status
						, writedate, having_attach
				from
				(
				    select PK_MSGNO , FK_RECIPIENTNO, ORIGIN_MSGNO, SUBJECT, CONTENT, VIEW_STATUS, WRITEDATE, having_attach, FK_SENDERNO
				    from tbl_messenger
				    where FK_RECIPIENTNO = #{empno}
		            order by WRITEDATE desc
				)
				join 
				( 
				    select empno, NAME, DEPTNAME, POSITION, PROFILE_COLOR
				    from TBL_EMPLOYEES M join  TBL_DEPT D
				    on M.fk_deptno = D.deptno
				
				) 
				on FK_SENDERNO = empno
				<if test='searchWord != ""'>
					where  lower(name) like '%' || lower(#{searchWord}) || '%' OR lower(subject) like '%' || lower(#{searchWord}) ||'%' OR lower(content) like '%' || lower(#{searchWord}) || '%'
				</if>
		)
		where rno between #{startRno} and #{endRno}
	</select>
	
	
	<!-- 메신저 내용 조회하기(보낸 메신저) -->
	<select id="selectMailContent" parameterType="String" resultMap="MsgMap">
		select NAME, SUBSTR(NAME, -2, 2) as nickname , DEPTNAME, POSITION, PROFILE_COLOR, PK_MSGNO , empno, ORIGIN_MSGNO, SUBJECT, CONTENT, VIEW_STATUS
		    ,  to_char(WRITEDATE , 'yyyy-mm-dd hh24:mi:ss' ) as WRITEDATE , group_msgno, having_attach
		from
		(
		    select PK_MSGNO , FK_RECIPIENTNO, ORIGIN_MSGNO, SUBJECT, CONTENT, VIEW_STATUS, WRITEDATE, having_attach, group_msgno
		    from tbl_messenger
		    where PK_MSGNO = #{msgno}
		)
		join 
		( 
		    select empno, NAME, DEPTNAME, POSITION, PROFILE_COLOR
		    from TBL_EMPLOYEES M join  TBL_DEPT D
		    on M.fk_deptno = D.deptno
		
		) 
		on FK_RECIPIENTNO = empno
		order by WRITEDATE desc
	</select>
	
	
	<!-- 메신저 내용 조회하기(받은 메신저) -->
	<select id="selectMailContent2" parameterType="String" resultMap="MsgMap">
		select NAME, SUBSTR(NAME, -2, 2) as nickname , DEPTNAME, POSITION, PROFILE_COLOR, PK_MSGNO , empno, ORIGIN_MSGNO, SUBJECT, CONTENT, VIEW_STATUS
		    ,  to_char(WRITEDATE , 'yyyy-mm-dd hh24:mi:ss' ) as WRITEDATE , group_msgno, having_attach
		from
		(
		    select PK_MSGNO , FK_RECIPIENTNO, ORIGIN_MSGNO, SUBJECT, CONTENT, VIEW_STATUS, WRITEDATE, having_attach, group_msgno, fk_senderno
		    from tbl_messenger
		    where PK_MSGNO = #{msgno}
		)
		join 
		( 
		    select empno, NAME, DEPTNAME, POSITION, PROFILE_COLOR
		    from TBL_EMPLOYEES M join  TBL_DEPT D
		    on M.fk_deptno = D.deptno
		
		) 
		on fk_senderno = empno
		order by WRITEDATE desc
	</select>
	
	
	<!-- 조회한 메신저에 첨부파일이 있다면 조회하기 -->
	<select id="selectMsgFileList" parameterType="String" resultType="com.yolo.hr.jihyunModel.FileVO">
		select pk_fileno, fileName, orgFilename, fileSize
		from tbl_messenger_file
		where fk_msgno = #{group_msgno}
	</select>
	
	
	<!-- 메신저 조회수 변경하기 -->
	<update id="updateViewStatus" parameterType="String" >
		update tbl_messenger set VIEW_STATUS = 1
		where PK_MSGNO in ( ${msgno} ) 
	</update>
	
	
	<!-- 모든 안읽은 메신저 조회수 변경하기 -->
	<update id="updateAllMsgStatus" parameterType="String" >
		update tbl_messenger set VIEW_STATUS = 1
		where FK_RECIPIENTNO = #{empno} 
	</update>
	
	
	<!-- 메신저의 첨부파일 추가하기 -->
	<insert id="insertMsgFile" parameterType="com.yolo.hr.jihyunModel.FileVO">
		insert into tbl_messenger_file (pk_fileno, fileName, orgFilename, fileSize, fk_msgno)
		values (seq_tbl_messenger_file_fileno.nextval, #{fileName}, #{orgFilename}, #{fileSize}, #{fk_msgno})
	</insert>
	
	
	<!-- 메신저의 첨부파일에 원본 메신저 번호 저장하기 -->
	<update id="updateFileMsgno">
		update tbl_messenger_file set fk_msgno = #{msgno}
		where fk_msgno = #{time}
	</update>
	
	
	<!-- 전달할 메신저 상세사항 얻어오기 -->
	<select id="selectDeliverMsg" parameterType="String" resultType="com.yolo.hr.jihyunModel.MessengerVO">
		select GROUP_MSGNO, HAVING_ATTACH
		from tbl_messenger
		where PK_MSGNO = #{msgno}
	</select>
	
	
	<!-- 총 메신저 건 수 알아오기 (페이지네이션 용) 보낸 메신저용-->
	<select id="getTotalCount"  parameterType="HashMap" resultType="int">
		select count(PK_MSGNO)
        from
        (
            select PK_MSGNO , FK_RECIPIENTNO, ORIGIN_MSGNO, SUBJECT, CONTENT, VIEW_STATUS, WRITEDATE, having_attach
            from tbl_messenger
            where FK_SENDERNO =#{empno}
            order by WRITEDATE desc
        )
        join 
        ( 
            select empno, NAME, DEPTNAME, POSITION, PROFILE_COLOR
            from TBL_EMPLOYEES M join  TBL_DEPT D
            on M.fk_deptno = D.deptno
        
        ) 
        on FK_RECIPIENTNO = empno
        <if test='searchWord != ""'>
			where lower(name) like '%' || lower(#{searchWord}) || '%' OR lower(subject) like '%' || lower(#{searchWord}) ||'%' OR lower(content) like '%' || lower(#{searchWord}) || '%'
		</if>
	</select>
	
	
	<!-- 총 메신저 건 수 알아오기 (페이지네이션 용) 받은 메신저용-->
	<select id="getTotalCount2"  parameterType="HashMap" resultType="int">
		select count(PK_MSGNO)
        from
        (
            select PK_MSGNO , FK_RECIPIENTNO, ORIGIN_MSGNO, SUBJECT, CONTENT, VIEW_STATUS, WRITEDATE, having_attach, FK_SENDERNO 
            from tbl_messenger
            where FK_RECIPIENTNO =#{empno}
            order by WRITEDATE desc
        )
        join 
        ( 
            select empno, NAME, DEPTNAME, POSITION, PROFILE_COLOR
            from TBL_EMPLOYEES M join  TBL_DEPT D
            on M.fk_deptno = D.deptno
        
        ) 
        on FK_SENDERNO  = empno
        <if test='searchWord != ""'>
			where lower(name) like '%' || lower(#{searchWord}) || '%' OR lower(subject) like '%' || lower(#{searchWord}) ||'%' OR lower(content) like '%' || lower(#{searchWord}) || '%'
		</if>
	</select>
	
	
	<!-- 메세지 발송을 위해 사람이름 알아오기 -->
	<select id="getEmpName" parameterType="String" resultType="String">
		select name
		from TBL_EMPLOYEES
		where empno = #{empno}
	</select>
	
	
	
	<!-- 소식 추가하기 -->
	<insert id="insertAlarm" parameterType="String"  >
		${sql}
	</insert>
	
	
	<!-- 소식 조회 -->
	<select id="selectAlarm" parameterType="String" resultType="com.yolo.hr.jihyunModel.AlarmVO">
		select PK_ALARMNO, FK_RECIPIENTNO, URL, URL2, ALARM_CONTENT, ALARM_TYPE, func_get_alarm_time(WRITEDATE ) as WRITEDATE2
		from tbl_alarm
		where FK_RECIPIENTNO = #{empno} and view_status = 0
		order by WRITEDATE desc
	</select>
	
	
	<!-- 지난 소식 조회 -->
	<select id="selectPastAlarm" parameterType="String" resultType="com.yolo.hr.jihyunModel.AlarmVO">
		select PK_ALARMNO, FK_RECIPIENTNO, URL, URL2, ALARM_CONTENT, ALARM_TYPE, func_get_alarm_time(WRITEDATE ) as WRITEDATE2
		from tbl_alarm
		where FK_RECIPIENTNO = #{empno} and view_status = 1 and WRITEDATE > (sysdate -7)
		order by WRITEDATE desc
	</select>
	
	
	<!-- 소식 읽기 -->
	<update id="updateAlarm" parameterType="String">
		update tbl_alarm set view_status = 1
		where pk_alarmno = #{alarmno}
	</update>
	
	
	<!-- 모든 안읽은 소식 읽기 -->
	<update id="updateAllAlarm" parameterType="String">
		update tbl_alarm set view_status = 1
		where FK_RECIPIENTNO = #{empno} and view_status = 0
	</update>
	
	
	
	
	
	<!-- 휴가 종류와 남은 일수 얻어오기 (홈화면용)-->
	<resultMap type="HashMap" id="homeLeaveTypeMap">
		<result property="pk_leave_type" column="pk_leave_type" javaType="String"/>
		<result property="leave_name" column="leave_name" javaType="String"/>
		<result property="limit_info" column="limit_info" javaType="String"/>
		<result property="add_file" column="add_file" javaType="String"/>
		<result property="emoji" column="emoji" javaType="String"/>
		<result property="limit_days" column="limit_days" javaType="String"/>
		<result property="remaining_leave" column="remaining_leave" javaType="String"/>
		<result property="info1" column="info1" javaType="String"/>
		<result property="info2" column="info2" javaType="String"/>
		<result property="info3" column="info3" javaType="String"/>
	</resultMap>
	<select id="selectLeaveType" parameterType="HashMap" resultMap="homeLeaveTypeMap">
		select pk_leave_type, leave_name, limit_info, add_file, emoji, limit_days
		        ,case when LIMIT_DAYS>0 then LIMIT_DAYS - (select func_get_used_leave( PK_LEAVE_TYPE , ${empno}, ${year}) from dual) end as remaining_leave
		from tbl_leave
	</select>
	
	
	<!-- 모달에 들어갈 해당 휴가에 대한 상세 내용 알아오기 -->
	<select id="selectLeaveData" parameterType="HashMap" resultMap="homeLeaveTypeMap">
		select PK_LEAVE_TYPE, LEAVE_NAME, LIMIT_INFO, ADD_FILE, EMOJI, info1, info2, info3, LIMIT_DAYS
		        ,case when LIMIT_DAYS>0 then LIMIT_DAYS - (select func_get_used_leave( PK_LEAVE_TYPE , ${empno}, to_char(sysdate, 'yyyy')) from dual) end as remaining_leave
		from tbl_leave
		where PK_LEAVE_TYPE = #{pk_leave_type}
	</select>
	
</mapper>